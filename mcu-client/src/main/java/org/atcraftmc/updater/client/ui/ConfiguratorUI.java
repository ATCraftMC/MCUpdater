package org.atcraftmc.updater.client.ui;

import org.atcraftmc.updater.channel.UpdateChannelMeta;
import org.atcraftmc.updater.client.ClientInstallationInfo;
import org.atcraftmc.updater.client.ui.component.SimpleJList;
import org.atcraftmc.updater.client.ui.framework.SwingUtil;
import org.atcraftmc.updater.client.ui.framework.UI;
import org.atcraftmc.updater.client.ui.framework.UIHandle;

import javax.swing.*;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.Locale;
import java.util.Set;
import java.util.function.Consumer;

public final class ConfiguratorUI extends UI<ConfiguratorUI> {
    private final ClientInstallationInfo info;
    private SimpleJList list;
    private JPanel root;
    private JButton closeButton;

    public ConfiguratorUI(ClientInstallationInfo info, Consumer<ConfiguratorUI> init) {
        this.info = info;

        $$$setupUI$$$();

        this.closeButton.addActionListener(e -> this.handle().close());

        var panel = new JPanel();
        panel.setLayout(new BorderLayout());
        panel.add(new JLabel("正在等待服务器相应信息..."), BorderLayout.CENTER);
        panel.setPreferredSize(new Dimension(panel.getPreferredSize().width, this.list.getPreferredSize().height));

        this.list.add(panel);
        init.accept(this);
    }

    public static UIHandle<ConfiguratorUI> open(ClientInstallationInfo info, Consumer<ConfiguratorUI> init) {
        return new UIHandle<>(new ConfiguratorUI(info, init));
    }

    public void acceptData(Set<UpdateChannelMeta> metas) {
        this.list.clear();
        for (var meta : metas) {
            this.list.add(new UpdateChannelCard(meta, this.info).$$$getRootComponent$$$());
        }
    }

    @Override
    public void build(JFrame frame) {
        frame.setTitle("选择更新包");
        frame.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
        frame.setSize(450, 600);
        frame.setResizable(false);
        frame.setContentPane(this.root);
        SwingUtil.center(frame);

        frame.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                info.save();
            }
        });
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        root = new JPanel();
        root.setLayout(new GridBagLayout());
        final JScrollPane scrollPane1 = new JScrollPane();
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 4;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        root.add(scrollPane1, gbc);
        scrollPane1.setViewportView(list);
        final JPanel spacer1 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 2;
        gbc.gridy = 4;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        root.add(spacer1, gbc);
        final JPanel spacer2 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 7;
        gbc.fill = GridBagConstraints.VERTICAL;
        root.add(spacer2, gbc);
        final JPanel spacer3 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 4;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        root.add(spacer3, gbc);
        final JPanel spacer4 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 3;
        gbc.fill = GridBagConstraints.VERTICAL;
        root.add(spacer4, gbc);
        final JLabel label1 = new JLabel();
        Font label1Font = this.$$$getFont$$$(null, -1, 22, label1.getFont());
        if (label1Font != null) {
            label1.setFont(label1Font);
        }
        label1.setText("管理客户端资源");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 1;
        gbc.anchor = GridBagConstraints.WEST;
        root.add(label1, gbc);
        final JPanel spacer5 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.fill = GridBagConstraints.VERTICAL;
        root.add(spacer5, gbc);
        final JLabel label2 = new JLabel();
        label2.setText("选择安装/接受可选的更新包");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 2;
        gbc.anchor = GridBagConstraints.WEST;
        root.add(label2, gbc);
        closeButton = new JButton();
        closeButton.setMaximumSize(new Dimension(78, 36));
        closeButton.setMinimumSize(new Dimension(78, 36));
        closeButton.setPreferredSize(new Dimension(78, 36));
        closeButton.setText("完成");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 6;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        root.add(closeButton, gbc);
        final JPanel spacer6 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 5;
        gbc.fill = GridBagConstraints.VERTICAL;
        root.add(spacer6, gbc);
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) {
            return null;
        }
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(
                font.getFamily(),
                font.getStyle(),
                font.getSize()
        ) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return root;
    }

    private void createUIComponents() {
        this.list = new SimpleJList();
    }


}
