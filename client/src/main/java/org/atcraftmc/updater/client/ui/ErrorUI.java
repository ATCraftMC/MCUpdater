package org.atcraftmc.updater.client.ui;

import org.atcraftmc.updater.client.util.UI;
import org.atcraftmc.updater.client.util.UIHandle;

import javax.swing.*;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.net.ConnectException;
import java.util.Locale;

public final class ErrorUI extends UI<ErrorUI> {
    private JPanel root;
    private JButton exit;
    private JButton close;
    private JTextArea text;

    public ErrorUI(Throwable throwable) {
        this.exit.addActionListener(actionEvent -> System.exit(0));
        this.close.addActionListener(actionEvent -> this.handle().close());
        this.text.setEditable(false);
        this.text.setLineWrap(true);

        var builder = new StringBuilder();
        var message = throwable.getMessage();

        if (throwable instanceof ConnectException || message.contains("Connection refused")) {
            builder.append("无法连接到更新服务器, 请检查网络或联系管理员。\n\n");
            this.text.setText(builder.toString());
            return;
        } else {
            builder.append(message).append("发生了内部错误, 请向管理员反馈情况。\n");
        }

        builder.append("\n");
        builder.append("错误信息: ").append(throwable.getMessage()).append("\n");
        builder.append("堆栈信息: ").append("\n");

        for (var element : throwable.getStackTrace()) {
            builder.append(" -> ")
                    .append(element.getClassName())
                    .append(":")
                    .append(element.getMethodName())
                    .append("[")
                    .append(element.getLineNumber())
                    .append("]")
                    .append("\n");
        }

        this.text.setText(builder.toString());
    }

    public static UIHandle<ErrorUI> open(Throwable t) {
        return new UIHandle<>(new ErrorUI(t));
    }

    @Override
    public void build(JFrame frame) {
        frame.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
        frame.setContentPane(this.root);
        frame.setSize(600, 400);
        frame.setResizable(false);
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        root = new JPanel();
        root.setLayout(new GridBagLayout());
        text = new JTextArea();
        text.setEditable(false);
        Font textFont = this.$$$getFont$$$(null, -1, 14, text.getFont());
        if (textFont != null) {
            text.setFont(textFont);
        }
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 3;
        gbc.gridwidth = 4;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        root.add(text, gbc);
        final JPanel spacer1 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 5;
        gbc.gridy = 3;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        root.add(spacer1, gbc);
        final JPanel spacer2 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 5;
        gbc.gridwidth = 4;
        gbc.fill = GridBagConstraints.VERTICAL;
        root.add(spacer2, gbc);
        final JPanel spacer3 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 3;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        root.add(spacer3, gbc);
        final JPanel spacer4 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 2;
        gbc.gridwidth = 4;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        root.add(spacer4, gbc);
        final JLabel label1 = new JLabel();
        Font label1Font = this.$$$getFont$$$(null, -1, 22, label1.getFont());
        if (label1Font != null) {
            label1.setFont(label1Font);
        }
        label1.setText("发生错误！");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 1;
        gbc.anchor = GridBagConstraints.WEST;
        root.add(label1, gbc);
        final JPanel spacer5 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.gridwidth = 4;
        gbc.fill = GridBagConstraints.VERTICAL;
        root.add(spacer5, gbc);
        final JPanel spacer6 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 4;
        gbc.weightx = 0.3;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        root.add(spacer6, gbc);
        exit = new JButton();
        exit.setMargin(new Insets(0, 0, 0, 0));
        exit.setMaximumSize(new Dimension(82, 40));
        exit.setMinimumSize(new Dimension(82, 40));
        exit.setPreferredSize(new Dimension(82, 40));
        exit.setText("退出游戏");
        gbc = new GridBagConstraints();
        gbc.gridx = 2;
        gbc.gridy = 4;
        root.add(exit, gbc);
        close = new JButton();
        close.setEnabled(true);
        Font closeFont = this.$$$getFont$$$(null, -1, -1, close.getFont());
        if (closeFont != null) {
            close.setFont(closeFont);
        }
        close.setMargin(new Insets(0, 0, 0, 0));
        close.setMaximumSize(new Dimension(106, 40));
        close.setMinimumSize(new Dimension(106, 40));
        close.setPreferredSize(new Dimension(106, 40));
        close.setSelected(false);
        close.setText("继续启动");
        close.setVisible(true);
        gbc = new GridBagConstraints();
        gbc.gridx = 3;
        gbc.gridy = 4;
        gbc.insets = new Insets(0, 5, 0, 0);
        root.add(close, gbc);
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) {
            return null;
        }
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(
                font.getFamily(),
                font.getStyle(),
                font.getSize()
        ) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return root;
    }

}
